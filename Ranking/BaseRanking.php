<?php

namespace Efrag\Lib\BiblioMetrics\Ranking;

/**
 * Class BaseRanking
 * @package Efrag\Lib\BiblioMetrics\Ranking
 */
abstract class BaseRanking implements RankingInterface
{
    /**
     * The array of entities and values. The values included in the array should be sorted in descending order with the
     * greater values appearing at the first positions of the array. The expected format for the array is
     * ['entityA' => valueA, 'entityB' => valueB]. The values are supposed to be numeric and the keys of the array are
     * the identifiers of the entities we wish to sort.
     *
     * @var array
     */
    protected $entityValue;

    /**
     * This array is generated by this class based on the $entityValue array. It's purpose is to identify all the
     * entities that have the same values. The following values 150, 150, 130, 130, 130, 120 would result to the
     * following ranks in the BaseRank array 1, 1, 2, 2, 2, 3
     *
     * @var array
     */
    protected $entityBaseRank;

    /**
     * Sets the entityValue array of the class and also generates the entityBaseRank array for the provided entities
     * and their corresponding values.
     *
     * @param array $entityValue
     * @return $this
     */
    public function setEntityValue(array $entityValue)
    {
        $this->entityValue = $entityValue;
        $this->entityBaseRank = $this->setEntityBaseRank();

        return $this;
    }

    /**
     * Method that generates the individual rankings for each ranking class and returns the final ranking array to the
     * caller
     *
     * @return array
     */
    public function getRanking()
    {
        return $this->generateFinalRanking();
    }

    /**
     * Using the entityValue array generate the entityBaseRank array that uses the individual values to group together
     * entities with the same value. All entities that have the same value will be assigned the same rank. i.e. if we
     * have the following values 150, 150, 140, 130, 130 these values will be transformed to the following rankings
     * 1, 1, 2, 3, 3.
     *
     * @return array
     */
    protected function setEntityBaseRank()
    {
        $entityRanks = [];

        $rank = 1;
        list($entity, $value) = each($this->entityValue);

        $entityRanks[$entity] = $rank;
        $previousValue = $value;

        while (list($entity, $value) = each($this->entityValue)) {
            if ($value < $previousValue) {
                $rank++;
            }

            $entityRanks[$entity] = $rank;
            $previousValue = $value;
        }

        return $entityRanks;
    }

    /**
     * Main method to be overridden by any class that wishes to provide a different type of ranking. This method should
     * return an array that has the same count of elements as the entityValue array.
     * @return array
     */
    abstract protected function generateFinalRanking();
}
